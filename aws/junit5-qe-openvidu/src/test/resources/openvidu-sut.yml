
---
AWSTemplateFormatVersion: 2010-09-09
Description: Openvidu Server CloudFormation AMI template.

Parameters:
  OpenViduVersion:
    Description: Openvidu Version
    Type: String
    Default: 2.7.0
  KMSVersion:
    Description: Kurento Media Server Version. Set to nightly for nightly version.
    Type: String
    Default: 6.9.0
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance."
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  InstanceType:
    Description: "EC2 Instance type"
    Type: String
    Default: c5.xlarge
    AllowedValues:
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    ConstraintDescription: "Must be a valid EC2 instance type."

Resources:
  OpenviduServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: "Install and configure OpenVidu Server"
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.OpenviduServer.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource OpenviduServer --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/usr/local/bin/installSoftware.sh":
              content: |
                #!/bin/bash
                set -eu -o pipefail
                # installing necessary software
                apt-get update
                
                apt-get install -y awscli zip unzip openjdk-8-jdk pwgen nginx supervisor ec2-ami-tools
                
                # install coturn
                apt-get -y install coturn

                # install redis
                apt-get -y install redis-server
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/installKMS.sh":
              content: !Sub |
                #!/bin/bash
                set -eu -o pipefail
                if [ "${KMSVersion}" == "nightly" ]; then
                  git clone https://github.com/Kurento/adm-scripts.git /opt/kurento
                  /opt/kurento/development/kurento-repo-xenial-nightly-2018
                  /opt/kurento/development/kurento-install-debugging-2018 
                else
                  echo "deb [arch=amd64] http://ubuntu.openvidu.io/${KMSVersion} xenial kms6" > /etc/apt/sources.list.d/kurento.list
                  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83
                  apt-get update
                  apt-get -y install kurento-media-server
                fi
                systemctl enable kurento-media-server
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/getOpenVidu.sh":
              content: !Sub |
                #!/bin/bash
                set -eu -o pipefail
                mkdir -p /opt/openvidu
                wget https://github.com/OpenVidu/openvidu/releases/download/v${OpenViduVersion}/openvidu-server-${OpenViduVersion}.jar -O /opt/openvidu/openvidu-server.jar
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/getTestApp.sh":
              content: |
                #!/bin/bash
                set -eu -o pipefail
                WORKDIR=$(mktemp -d)
                pushd $WORKDIR
                git clone https://github.com/elastest/openvidu-loadtest.git
                cp -rav openvidu-loadtest/webapp/* /var/www/html
                popd
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/openvidu-config.sh":
              content: |
                #!/bin/bash -x
                set -eu -o pipefail
                # Vars
                PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                # Configure kurento
                cat >/etc/kurento/modules/kurento/WebRtcEndpoint.conf.ini<<EOF
                stunServerAddress=${PUBLIC_IP}
                stunServerPort=3478
                EOF
                echo "export GST_DEBUG_NO_COLOR=1" >> /etc/default/kurento-media-server
                # Configure coturn
                cat >/etc/turnserver.conf<<EOF
                external-ip=${PUBLIC_IP}
                listening-port=3478
                fingerprint
                lt-cred-mech
                max-port=65535
                min-port=49152
                pidfile="/var/run/turnserver.pid"
                realm=openvidu
                simple-log
                redis-userdb="ip=127.0.0.1 dbname=0 password=turn connect_timeout=30"
                verbose
                EOF
                # Configure coturn
                echo "TURNSERVER_ENABLED=1" > /etc/default/coturn
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/configure-nginx.sh":
              content: |
                #!/bin/bash -x
                set -eu -o pipefail
                # Vars
                PUBLIC_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)

                pushd /etc/nginx
                mkdir -p certs
                openssl req -subj '/CN=${PUBLIC_HOSTNAME}' -x509 -newkey rsa:4096 -nodes -keyout certs/key.pem -out certs/cert.pem -days 365

                cat >sites-enabled/default<<EOF
                server {
                  listen 443 ssl default;
                  server_name ${PUBLIC_HOSTNAME};
                  ssl on;
                  ssl_certificate /etc/nginx/certs/cert.pem;
                  ssl_certificate_key /etc/nginx/certs/key.pem;
                  include sites-available/proxy.conf;
                  root /var/www/html;
                }
                server {
                  listen 4443 ssl;
                  server_name ${PUBLIC_HOSTNAME};
                  ssl on;
                  ssl_certificate /etc/nginx/certs/cert.pem;
                  ssl_certificate_key /etc/nginx/certs/key.pem;
                  include sites-available/proxy.conf;
                  location / {
                    proxy_pass http://${PUBLIC_HOSTNAME}:5443;
                  }
                }
                EOF
                cat >sites-available/proxy.conf<<EOF
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_headers_hash_bucket_size 512;
                proxy_redirect off;

                # Websockets
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                EOF
                cat >/etc/nginx/nginx.conf<<EOF
                user www-data;
                worker_processes 4;
                pid /run/nginx.pid;

                events {
                  worker_connections 768;
                }

                http {
                  sendfile on;
                  tcp_nopush on;
                  tcp_nodelay on;
                  keepalive_timeout 65;
                  types_hash_max_size 2048;
                  include /etc/nginx/mime.types;
                  default_type application/octet-stream;

                  access_log /var/log/nginx/access.log;
                  error_log /var/log/nginx/error.log;

                  gzip on;
                  gzip_disable "msie6";

                  include /etc/nginx/conf.d/*.conf;
                  include /etc/nginx/sites-enabled/*;
                }
                EOF
                popd
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/start-services.sh":
              content: |
                #!/bin/bash
                PUBLIC_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                systemctl restart redis-server
                systemctl restart coturn 
                systemctl restart kurento-media-server
                systemctl restart nginx
                exec java -jar -Dopenvidu.secret=MY_SECRET -Dserver.ssl.enabled=false -Dserver.port=5443 -Dopenvidu.publicurl=https://${PUBLIC_HOSTNAME}:4443/ -Dopenvidu.streams.video.max-recv-bandwidth=0 -Dopenvidu.streams.video.min-recv-bandwidth=0 -Dopenvidu.streams.video.max-send-bandwidth=0 -Dopenvidu.streams.video.min-send-bandwidth=0 /opt/openvidu/openvidu-server.jar >/var/log/openvidu.log 2>&1 &
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId:  "ami-03ef731cc103c9f09"
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref OpenviduServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash 
            set -eu -o pipefail
            apt-get update
            apt-get install -y python-pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenviduServer
                        
            /usr/local/bin/installSoftware.sh || { echo "[Openvidu] error installing software"; exit 1; }
            
            /usr/local/bin/installKMS.sh || { echo "[Openvidu] error installing KMS"; exit 1; }
            
            /usr/local/bin/getOpenVidu.sh || { echo "[Openvidu] error installing OpenVidu"; exit 1; }

            /usr/local/bin/getTestApp.sh || { echo "[Openvidu] error installing TestApp"; exit 1; }

            /usr/local/bin/openvidu-config.sh || { echo "[Openvidu] error configuring OpenVidu"; exit 1; }

            /usr/local/bin/configure-nginx.sh || { echo "[Openvidu] error configuring Nginx"; exit 1; }

            /usr/local/bin/start-services.sh || { echo "[Openvidu] error launching services"; exit 1; }

            # sending the finish call
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}
            
  OpenviduServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Openvidu ports
      SecurityGroupIngress:
      - IpProtocol: tcp 
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0            
            
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1

Outputs:
  OpenViduURL:
    Description: "Use this URL to connect OpenVidu with user and password"
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt OpenviduServer.PublicDnsName 
        - ':4443'

  TestAppURL:
    Description: "Use this url to connect to the test app"
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt OpenviduServer.PublicDnsName 
node {
    elastest(tss: ['EUS'], surefireReportsPattern: '**/target/surefire-reports/TEST-*.xml', project: 'Jenkins Examples') {
        withKubeConfig([credentialsId: 'k8s-api-token', serverUrl: env.K8S_URL]) {
            try {
                stage("Start SUT") {
                    git(
                        url: 'https://github.com/elastest/demo-projects'
                        ) 
                    sh "cd ./openvidu-test/k8s;./addSutPrefix.sh;kubectl create -f ."
                    checkPodStatus(5, "${ET_SUT_CONTAINER_NAME}-openvidu-java-sut")
                }
                
                stage("Run tests") {
                    mvnHome = tool 'M3.3.9'
                    def sutIp = getPodIp('openvidu-java-sut')
                    waitForService(5, "https://" + sutIp + ":5000")
                    withEnv(['ET_SUT_HOST=' + sutIp]) {
                        echo "Running test"
                        sh "cd ./openvidu-test/; '${mvnHome}/bin/mvn' -Dbrowser=chrome -DforkCount=0 test" 
                    }
                }
            
            } finally {
                sh "cd ./openvidu-test/;kubectl delete -f k8s/"
            }
        }
    }
}

def getPodIp(podName) {
    echo "Retrive pod ip"
    def podIp = sh (
        script: "kubectl get pod -o wide | grep " + podName + " | awk '{print \$6}'",
        returnStdout: true
    ).split( '\n' ).first()

    echo podName+" IP = " + podIp;
    return podIp;
}

def waitForService(time, serviceUrl) {
    timeout(time) {
        waitUntil {
            echo "Waiting for the service " + serviceUrl + " is ready"
            script {
                def r = sh script: 'wget -q --no-check-certificate ' + serviceUrl + ' -O /dev/null', returnStatus: true
                return (r == 0);
           }
        }
    }
}

def checkPodStatus(time, podName) {
    timeout(time) {
        waitUntil {
            echo "Waiting for the pod " + podName + " is created"
            script {
                def r = sh script: 'kubectl get pods -l io.elastest.service=' + podName.replace('_','-') + " | awk '{print \$3}'", returnStdout: true
                def status = r.split("\n").last()
                echo "Pod ${podName} current status: " + status
                return ( status == 'Running');
           }
        }
    }
}
